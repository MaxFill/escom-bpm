<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:p="http://primefaces.org/ui"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                template="/view/templ/templ-card.xhtml">

    <ui:param name="_bean" value="#{processCardBean}"/>

    <ui:define name="customStyleCSS">
        <style type="text/css">
            .ui-diagram-task {
                background-color: #9ed4ef;
                width: 14em;
                min-height: 4em;                
            }

            .ui-diagram-element:hover {
                background-color: #C7C6C4;
            }

            .ui-diagram-element {                 
                text-align: center;
                color: #ffffff;
                border-radius: 4px;
                border:0.1em dotted #E5E4E2;
                box-shadow: 0 5px 10px rgba(0, 0, 0, 0.8);
            }

            .ui-diagram-logic {
                width:4em;
                height:4em;
                border-radius: 4em;
                background-color: #099b05;
                word-wrap: normal !important;
            }

            .ui-diagram-start {
                width:3em;
                height:3em;
                background-color: #edef04;
            }

            .ui-diagram-exit {
                width:3em;
                height:3em;
                border-radius: 3em;
                background-color: #000000;
            }

            .ui-diagram-success-state {
                width:9em;
                height:5em;
                background-color: #02b044;
            }

            .ui-diagram-fail-state {
                width:8em;
                height:5em;
                background-color: #C33730;
            }

            .ui-diagram-condition {
                width:6em;
                height:6em;
                background-color: #c306ab;
            }

            .iw-contextMenu {
                font-family: Verdana, Helvetica, Arial, sans-serif;
            }
        </style>
    </ui:define>

    <ui:define name="customJavaScript">
         <h:outputScript library="contextMenu" name="contextMenu.js" /> 
         <h:outputStylesheet library="contextMenu" name="contextMenu.css"/> 
    </ui:define>
    
    <ui:define name="card_scripts">
        <script type="text/javascript"> 
            function init() {
                onAfterFormLoad();
            }
            function addMenu(elementIds){    
                var menu = [{
                        name: '#{bundle.Properties}',
                        img: '/escom-bpm-web/resources/images/settings.png',
                        fun: function () {
                            elementOpen();
                        }
                    },{
                        name: '#{bundle.Delete}',
                        img: '/escom-bpm-web/resources/images/delete.png',
                        fun: function () {
                            elementDelete();
                        }
                    }];

                elementIds.forEach(function(elementId){                  
                    var component = $(document.getElementById(elementId)); 
                    component.contextMenu('menu', menu, {triggerOn:'contextmenu', displayAround:'trigger', horAdjust:-component.width()+20, verAdjust: +20});
                });
            }

            function sendClick(info){
                    //console.log("elementId="+info.target.id);                    
                    var xPos = Math.round(info.target.offsetLeft / parseFloat($("body").css("font-size")));
                    var yPos = Math.round(info.target.offsetTop / parseFloat($("body").css("font-size")));
                    var elementId = info.target.id;
                    if (elementId == ""){
                        var parentElement = info.target.parentElement;                              
                        elementId = $(parentElement).attr('id');
                        xPos = Math.round(parentElement.offsetLeft / parseFloat($("body").css("font-size")));
                        yPos = Math.round(parentElement.offsetTop / parseFloat($("body").css("font-size")));
                    }
                    elementClicked([
                        {name : 'elementId',value : elementId},
                        {name : 'posX',     value : xPos},
                        {name : 'posY',     value : yPos}
                    ]);
            }
            
            $(document).on('click', '.ui-diagram > .ui-diagram-element', 
                function(info) {
                    sendClick(info);
                });
            $(document).on('dblclick', '.ui-diagram > .ui-diagram-element',
                function(info) {
                    var xPos = Math.round(info.target.offsetLeft / parseFloat($("body").css("font-size")));
                    var yPos = Math.round(info.target.offsetTop / parseFloat($("body").css("font-size")));
                    var elementId = info.target.id;
                    if (elementId == ""){
                        var parentElement = info.target.parentElement;                              
                        elementId = $(parentElement).attr('id');
                        xPos = Math.round(parentElement.offsetLeft / parseFloat($("body").css("font-size")));
                        yPos = Math.round(parentElement.offsetTop / parseFloat($("body").css("font-size")));
                    }
                    elementOpen([
                        {name : 'elementId',value : elementId},
                        {name : 'posX',     value : xPos},
                        {name : 'posY',     value : yPos}
                    ]);
                });
            $(document).on('contextmenu', '.ui-diagram > .ui-diagram-element',
                function(info) {
                    sendClick(info);
                });
            window.addEventListener("load", init, false);
        </script>
        
        <p:remoteCommand name="elementClicked" actionListener="#{processCardBean.onElementClicked}"/>
        <p:remoteCommand name="elementOpen" actionListener="#{processCardBean.onElementOpenClick(processCardBean)}"/>
        <p:remoteCommand name="elementDelete" actionListener="#{processCardBean.onElementDelete}"/>
        <p:remoteCommand name="onAfterFormLoad" action="#{processCardBean.onAfterFormLoad()}"/>
        
        <p:commandButton style="display: none;" id="btnOpenElement" actionListener="#{processCardBean.onElementOpen()}">
            <p:ajax event="dialogReturn" listener="#{processCardBean.onElementClose}"/>
        </p:commandButton>
    </ui:define>

    <ui:define name="page_body">                
        <p:tab id="cardTab" title="#{bundle.Process}" >
            <p:panelGrid columns="1" layout="grid" styleClass="ui-panelgrid-blank ui-grid-col-12" columnClasses="ui-grid-col-12">
                <p:outputLabel value="#{bundle.Name}" indicateRequired="true" />
                    <p:inputText id="nameItem" value="#{processCardBean.editedItem.name}"
                                 styleClass="ui-grid-col-12 col-padding"
                                 onkeypress="checkEsc(#{_bean.cancelBtnName});"
                                 onchange="return itemChange = 1;"
                                 disabled="#{processCardBean.isReadOnly()}"
                                 required="#{param['isRequired'] == 'true'}"
                                 requiredMessage="#{bundle.Field} [#{bundle.Name}] #{bundle.MustBeFilled}"/>
            </p:panelGrid>
        </p:tab>

        <p:tab title="#{bundle.Scheme}" >
            <p:panelGrid columns="1" layout="grid" styleClass="ui-panelgrid-blank ui-grid-col-12" columnClasses="ui-grid-col-12">
                <p:toolbar styleClass="ui-grid-col-12" >
                    <f:facet name="left">
                        <p:commandButton value="Tasks" title="#{bundle.AddTasks}"
                                        disabled="#{processCardBean.isReadOnly()}"
                                        onstart="PF('statusDialog').show()"
                                        oncomplete="PF('statusDialog').hide();"
                                        actionListener="#{staffBean.onManySelectItem()}" >
                           <p:ajax event="dialogReturn" listener="#{processCardBean.onStaffsSelected}" />
                        </p:commandButton>
                        <p:commandButton  value="And" title="#{bundle.AddLogicElement}"
                                          disabled="#{processCardBean.isReadOnly()}"
                                          actionListener="#{processCardBean.onAddLogicElement('And')}" >
                        </p:commandButton>
                        <p:commandButton  value="Or" title="#{bundle.AddLogicElement}"
                                          disabled="#{processCardBean.isReadOnly()}"
                                          actionListener="#{processCardBean.onAddLogicElement('Or')}" >
                        </p:commandButton>
                        <p:commandButton  value="If" title="#{bundle.AddCondition}"
                                          disabled="#{processCardBean.isReadOnly()}"
                                          actionListener="#{processCardBean.onAddConditionElement()}" >
                        </p:commandButton>
                        <p:commandButton  value="State" title="#{bundle.AddState}"
                                          disabled="#{processCardBean.isReadOnly()}"
                                          actionListener="#{processCardBean.onAddStateElement('success')}" >
                        </p:commandButton>
                        <span class="ui-separator">
                            <span class="ui-icon ui-icon-grip-dotted-vertical" />
                        </span>

                        <p:commandButton title="Load" icon="ui-icon-folder-open"
                                         actionListener="#{processCardBean.onLoadModelFromTempl()}"
                                         update="diagramm">
                        </p:commandButton>
                        <p:commandButton title="Clear" icon="ui-icon-closethick"
                                         actionListener="#{processCardBean.onClearModel()}"
                                         update="diagramm">
                        </p:commandButton>
                        <p:commandButton type="button" title="Print" icon="ui-icon-print"/>
                    </f:facet>

                    <f:facet name="right">
                        <p:menuButton value="Options">
                            <p:menuitem value="Save" actionListener="#{processCardBean.onSaveModelToTempl()}" icon="ui-icon-disk" />
                            <p:menuitem value="Reload" actionListener="#{processCardBean.onReloadModel()}" update="diagramm" icon="ui-icon-arrowrefresh-1-w" />
                            <p:menuitem value="Clear" actionListener="#{processCardBean.onClearModel()}" update="diagramm" icon="ui-icon-close" />
                        </p:menuButton>
                    </f:facet>
                </p:toolbar>

                <p:diagram id="diagramm" value="#{processCardBean.model}" style="height:1600px" styleClass="ui-widget-content ui-grid-col-12" var="el" >
                    <f:facet name="element" >
                        <h:outputLabel value="#{el.caption}" style="display:block;margin:1em;word-wrap:break-word;"/>
                    </f:facet>
                    <p:ajax event="connect" listener="#{processCardBean.onConnect}" />
                    <p:ajax event="disconnect" listener="#{processCardBean.onDisconnect}" />
                    <p:ajax event="connectionChange" listener="#{processCardBean.onConnectionChange}" />                    
                </p:diagram>                
                
            </p:panelGrid>
        </p:tab>
    </ui:define>
    
</ui:composition>