<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">

    <ui:composition template="/view/templ/templ-card.xhtml"> 
    
    <ui:param name="_bean" value="#{processCardBean}"/>
        
    <ui:define name="specActionMenu">
        <p:menuitem icon="ui-icon-play" value="#{bundle.Run}"
                    disabled="#{processCardBean.isReadOnly()}"
                    onclick="document.getElementById('mainFRM:btnRun').click();"/>
        <p:menuitem icon="ui-icon-stop" value="#{bundle.Stop}"
                    disabled="#{processCardBean.isDisableBtnStop()}"
                    onclick="document.getElementById('mainFRM:btnStop').click();"/>
    </ui:define>
    
    <ui:define name="CardToolButtons">
        <h:outputLabel value="#{bundle.State}: "/>
        <p:outputLabel value="#{processCardBean.getLabelFromBundle(_bean.editedItem.state.currentState.name)}"/>
        <p:spacer width="15"/>
        <p:commandButton id="btnRun" title="#{bundle.StartProcess}" icon="ui-icon-play"
                        disabled="#{processCardBean.isReadOnly()}"
                        update="mainFRM"
                        actionListener="#{processCardBean.onRun()}"
                        oncomplete="return itemChange = 0;">
            <f:param name="isRequired" value="true"/>
        </p:commandButton>
        <p:spacer width="2"/>
        <p:commandButton id="btnStop" title="#{bundle.InterruptionProcess}" icon="ui-icon-stop"
                        disabled="#{processCardBean.isDisableBtnStop()}"
                        update="mainFRM" 
                        actionListener="#{processCardBean.onStop()}"
                        oncomplete="return itemChange = 0;">
            <p:confirm header="#{bundle.InterruptionProcess}" message="#{msg.ConfirmInterruptionProcess}" icon="ui-icon-alert" />
        </p:commandButton>
    </ui:define>
    
    <ui:define name="page_body">                
        <p:tab title="#{bundle.Process}">
            <p:panelGrid columns="1" columnClasses="ui-grid-col-12 col-padding" styleClass="ui-grid-col-12 without-spaces" >                
                <p:outputLabel value="#{bundle.ProcessCaption}:" indicateRequired="true" />
                <p:inputText id="nameItem" value="#{processCardBean.editedItem.name}"
                         styleClass="ui-grid-col-12" 
                         onkeypress="checkEsc();"
                         onchange="return itemChange = 1;"
                         disabled="#{processCardBean.isReadOnly()}"
                         required="#{param['isRequired'] == 'true'}"
                         requiredMessage="#{bundle.Field} [#{bundle.ProcessCaption}] #{bundle.MustBeFilled}"/>                
                
                <p:outputLabel value="#{bundle.TermApproval}:" indicateRequired="true"/> 
                <p:calendar id="dtPlanExecDate" value="#{processCardBean.editedItem.planExecDate}"  
                            styleClass="without-spaces" pages="2"
                            timeZone="#{TimeZone.getDefault()}" disabledWeekends="true"
                            showHour="true" showMinute="true" pattern="dd.MM.yyyy HH:mm"
                            disabled="#{processCardBean.isReadOnly()}"
                            locale="#{sessionBean.locale}"
                            required="#{param['isRequired'] == 'true'}"
                            navigator="true" yearRange="c-10:c+20"
                            requiredMessage="#{bundle.Field} [#{bundle.TermApproval}] #{bundle.MustBeFilled}">                    
                    <p:ajax event="dateSelect" onstart="itemChange = 1;" />                    
                </p:calendar>
                
                <p:outputLabel value="#{bundle.Documents}:" />

                <ui:include src="/view/docs/doc-list.xhtml" >
                     <ui:param name="_docs" value="#{processCardBean.editedItem.docs}" />
                </ui:include>
                               
                <h:panelGroup styleClass="ui-grid-col-12">
                    <p:fileUpload value="#{fileUploadView.file}" auto="true" mode="advanced" styleClass="ui-grid-col-6"
                                  rendered="#{!processCardBean.isReadOnly()}" style="float:right;"
                                  allowTypes="#{applicationBean.ALLOW_FILE_TYPES}"
                                  sizeLimit="#{docBean.maxFileSize}"
                                  invalidFileMessage = "#{bundle.INVALID_FILE_TYPE}"
                                  invalidSizeMessage = "#{bundle.INVALID_FILE_SIZE}"
                                  fileLimitMessage   = "#{bundle.INVALID_FILE_COUNT}"
                                  process="@this" dragDropSupport="true"
                                  label="#{bundle.SelectFileAndCreateDoc}" 
                                  cancelLabel="#{bundle.Cancel}"
                                  uploadLabel="#{bundle.SaveFiles}"
                                  fileUploadListener="#{processCardBean.onUploadFile}"                           
                                  onstart="PF('statusDialog').show()"
                                  oncomplete="PF('statusDialog').hide(); document.getElementById('mainFRM:mainTabView:btnAddFile').click();">
                    </p:fileUpload> 
                    <p:commandButton id="btnAddFile" style="display: none;"  
                                 actionListener="#{processCardBean.onAddFile()}"
                                 update="mainFRM:mainTabView:tblDocs"> 
                    </p:commandButton>
                    <p:spacer width="10"/>
                    <p:commandButton id="btnAddDoc" value="#{bundle.AddDocument}" title="#{bundle.AddExistingDocument}"
                                     style="float:right;"
                                     rendered="#{!processCardBean.isReadOnly()}"
                                     actionListener="#{docBean.onManySelectItem()}"> 
                        <p:ajax event="dialogReturn" listener="#{processCardBean.onDocsSelected}" update="mainFRM:mainTabView:tblDocs"/>
                    </p:commandButton>
                </h:panelGroup>
            </p:panelGrid>
        </p:tab>
        
        <p:tab title="#{bundle.Scheme}" id="tbScheme"  >  
            <ui:include src="/view/processes/diagramm.xhtml"/>
        </p:tab>
        
        <p:tab title="#{bundle.ApprovalSheet}">
            <p:panelGrid columns="1" columnClasses="ui-grid-col-12" styleClass="ui-grid-col-12 without-spaces" > 
                <p:dataTable id="concorderList" value="#{processCardBean.getTasksFromModel()}" var="task" emptyMessage="#{bundle.EmptyTable}"
                            rowKey="#{task.tempId}" selectionMode="single" 
                            paginator="true" paginatorPosition="bottom" 
                            paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"                                                                                  
                            rowsPerPageTemplate="5, 10, 20, 35" 
                            currentPageReportTemplate="#{bundle.CountRecords}: {totalRecords}, #{bundle.Showing} {startRecord}-{endRecord} "
                            tableStyle="table-layout: auto;" styleClass="ui-grid-col-12 without-spaces">                

                   <p:column width="16" sortBy="#{task.state.currentState.name}">
                       <h:graphicImage id="iconDone" value="#{task.state.currentState.icon}" title="#{stateBean.getBundleName(task.state.currentState)}"/>
                   </p:column>

                   <p:column headerText="#{bundle.Concorder}" sortBy="#{task.planExecDate}">                        
                       <p:commandLink value="#{task.owner.nameEndElipse}" title="#{bundle.Open}"
                                      actionListener="#{processCardBean.setCurrentTask(task)}"
                                      oncomplete="document.getElementById('mainFRM:btnOpenTask').click();"/>                        
                   </p:column>

                   <p:column headerText="#{bundle.Term}" width="90" sortBy="#{task.planExecDate}">
                       <h:outputLabel value="#{task.planExecDate}">
                           <f:convertDateTime type="both" dateStyle="short" timeStyle="short" locale="#{sessionBean.locale}" timeZone="#{TimeZone.getDefault()}"/>
                       </h:outputLabel>
                   </p:column>

                   <p:column headerText="#{bundle.Status}" >
                       <h:outputLabel value="#{sessionBean.getItemStatus(task)}"/>
                   </p:column>

                   <p:column width="16" sortBy="#{task.iconName}" >
                       <p:graphicImage value="/resources/icon/#{task.iconName}.png" /> 
                   </p:column>

                   <p:column headerText="#{bundle.Result}" >
                       <h:outputLabel value="#{processCardBean.getLabelFromBundle(task.result)}"/>
                   </p:column>

               </p:dataTable>
            </p:panelGrid>
        </p:tab>
        
        <p:tab title="#{bundle.ReportsExe}">
            <p:panelGrid columns="1" columnClasses="ui-grid-col-12" styleClass="ui-grid-col-12 without-spaces">
                <ui:include src="/view/tasks/reports.xhtml"/>
            </p:panelGrid>
        </p:tab>
    </ui:define>    
    
    <ui:define name="customJavaScript">
        <h:outputScript library="contextMenu" name="contextMenu.js" />
        <h:outputStylesheet library="contextMenu" name="contextMenu.css"/> 
        <h:outputStylesheet library="css" name="processes.css"/> 
        
        <script type="text/javascript">        
            function addContextMenu(componentId){    
                var menu = [{
                        name: '#{bundle.Paste}',
                        img: '/escom-bpm-web/resources/icon/paste.png',
                        disable: true,
                        fun: function () {
                            elementPaste();
                        }
                    },{
                        name: '#{bundle.Close}',
                        img: '/escom-bpm-web/resources/icon/cancel.png'                        
                    }];

                var component = $(document.getElementById(componentId)); 
                component.contextMenu('menu', menu, {});                
            }

            function addElementMenu(elementIds){    
                var menu = [{
                        name: '#{bundle.Properties}',
                        img: '/escom-bpm-web/resources/images/settings.png',
                        fun: function () {
                            elementOpen();
                        }
                    },{
                        name: '#{bundle.Copy}',
                        img: '/escom-bpm-web/resources/icon/copy.png',
                        fun: function () {
                            elementCopy();
                        }
                    },{
                        name: '#{bundle.Delete}',
                        img: '/escom-bpm-web/resources/images/delete.png',
                        fun: function () {
                            elementDelete();
                        }
                    }];

                elementIds.forEach(function(elementId){                  
                    var component = $(document.getElementById(elementId)); 
                    component.contextMenu('menu', menu, {triggerOn:'contextmenu', displayAround:'trigger', horAdjust:-component.width()+20, verAdjust: +20});
                });
            }

            function sendElementClick(info){
                    //console.log("elementId="+info.target.id);                    
                    var xPos = Math.round(info.target.offsetLeft / parseFloat($("body").css("font-size")));
                    var yPos = Math.round(info.target.offsetTop / parseFloat($("body").css("font-size")));
                    var elementId = info.target.id;
                    if (elementId.indexOf('diagramm') == -1){
                        var parentElement = info.target.parentElement;                          
                        elementId = $(parentElement).attr('id');
                        //console.log("parent elementId="+ elementId);
                        xPos = Math.round(parentElement.offsetLeft / parseFloat($("body").css("font-size")));
                        yPos = Math.round(parentElement.offsetTop / parseFloat($("body").css("font-size")));
                    }                    
                    elementClicked([
                        {name : 'elementId',value : elementId},
                        {name : 'posX',     value : xPos},
                        {name : 'posY',     value : yPos}
                    ]);
            }            
                
            $(document).on('click', '.ui-diagram > .ui-diagram-element', 
                function(info) {
                    sendElementClick(info);
                });

            $(document).on('contextmenu', '.ui-diagram > .ui-diagram-element',
                function(info) {
                    sendElementClick(info);                    
            });
            $(document).on('dblclick', '.ui-diagram > .ui-diagram-element',
                function(info) {
                    var xPos = Math.round(info.target.offsetLeft / parseFloat($("body").css("font-size")));
                    var yPos = Math.round(info.target.offsetTop / parseFloat($("body").css("font-size")));
                    var elementId = info.target.id;
                    if (elementId == ""){
                        var parentElement = info.target.parentElement;                              
                        elementId = $(parentElement).attr('id');
                        xPos = Math.round(parentElement.offsetLeft / parseFloat($("body").css("font-size")));
                        yPos = Math.round(parentElement.offsetTop / parseFloat($("body").css("font-size")));
                    }
                    elementOpen([
                        {name : 'elementId',value : elementId},
                        {name : 'posX',     value : xPos},
                        {name : 'posY',     value : yPos}
                    ]);
                });

             function refreshContextMenu(componentId){
                 //console.log("refresh componentId="+componentId);
                 var menu = [{
                        name: '#{bundle.Paste}',
                        img: '/escom-bpm-web/resources/images/paste.png',
                        disable: false,
                        fun: function () {
                            elementPaste();
                        }
                    },{
                        name: '#{bundle.Close}',
                        img: '/escom-bpm-web/resources/icon/cancel.png',                        
                    }];

                var component = $(document.getElementById(componentId)); 
                component.contextMenu('update', menu, {});  
            }
        </script>
    </ui:define>
    
    <ui:define name="form_scripts">
        <p:remoteCommand name="elementClicked" actionListener="#{processCardBean.onElementClicked}"/>
        <p:remoteCommand name="elementOpen" actionListener="#{processCardBean.onElementOpenClick()}"/>
        <p:remoteCommand name="elementCopy" actionListener="#{processCardBean.onElementCopy()}"/>
        <p:remoteCommand name="elementPaste" actionListener="#{processCardBean.onElementPaste()}"/>
        <p:remoteCommand name="elementDelete" actionListener="#{processCardBean.onElementDelete}"/>
        
        <p:commandButton style="display: none;" id="btnOpenElement" actionListener="#{processCardBean.onElementOpen()}">
            <p:ajax event="dialogReturn" listener="#{processCardBean.onElementClose}"/>
        </p:commandButton>
        <p:commandButton style="display: none;" id="btnOpenTask" actionListener="#{processCardBean.onOpenTask()}">
            <p:ajax event="dialogReturn" listener="#{processCardBean.onAfterTaskClose}"/>
        </p:commandButton>
    </ui:define>
    
    <ui:define name="dialogs">
        <ui:include src="/view/tasks/report.xhtml"/>
        <ui:include src="/view/processes/templ/save-as-dlg.xhtml"/>
        <ui:include src="/view/processes/templ/load-from-templ-dlg.xhtml"/>
    </ui:define>
</ui:composition>
</html>